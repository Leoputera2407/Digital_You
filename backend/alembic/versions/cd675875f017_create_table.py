"""create table

Revision ID: cd675875f017
Revises: 
Create Date: 2023-06-23 02:03:04.326379

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cd675875f017'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('connector',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('source', sa.Enum('SLACK', 'WEB', 'GOOGLE_DRIVE', 'GITHUB', 'CONFLUENCE', 'ADHOC_UPLOAD', 'NOTION', name='documentsource', native_enum=False), nullable=False),
    sa.Column('input_type', sa.Enum('LOAD_STATE', 'POLL', 'EVENT', name='inputtype', native_enum=False), nullable=True),
    sa.Column('connector_specific_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('refresh_freq', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('disabled', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('google_app_credentials',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('credentials_json', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('organizations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('qdrant_collection_key', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('typesense_collection_key', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('BASIC', 'ADMIN', name='userrole', native_enum=False), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('api_keys',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key_type', sa.Enum('ANTHROPHIC_API_KEY', 'OPENAI_API_KEY', 'SLACK_BOT_KEY', name='dbapikeytype'), nullable=False),
    sa.Column('key_value', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('credential',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('credential_json', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('public_doc', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('model_configs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('supported_model_enum', sa.Enum('GPT3_5', 'GPT4', 'ANTHROPIC', name='dbsupportedmodeltype'), nullable=False),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('slack_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.String(), nullable=False),
    sa.Column('slack_user_id', sa.String(), nullable=False),
    sa.Column('slack_display_name', sa.String(), nullable=True),
    sa.Column('conversation_style', sa.String(), nullable=True),
    sa.Column('contiguous_chat_transcript', sa.String(), nullable=True),
    sa.Column('chat_pairs', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('connector_credential_pair',
    sa.Column('connector_id', sa.Integer(), nullable=False),
    sa.Column('credential_id', sa.Integer(), nullable=False),
    sa.Column('last_successful_index_time', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_attempt_status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'SUCCESS', 'FAILED', name='indexingstatus'), nullable=False),
    sa.Column('total_docs_indexed', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['connector_id'], ['connector.id'], ),
    sa.ForeignKeyConstraint(['credential_id'], ['credential.id'], ),
    sa.PrimaryKeyConstraint('connector_id', 'credential_id')
    )
    op.create_table('csrf_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('credential_id', sa.Integer(), nullable=False),
    sa.Column('csrf_token', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['credential_id'], ['credential.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('index_attempt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('connector_id', sa.Integer(), nullable=True),
    sa.Column('credential_id', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('NOT_STARTED', 'IN_PROGRESS', 'SUCCESS', 'FAILED', name='indexingstatus'), nullable=False),
    sa.Column('document_ids', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('error_msg', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['connector_id'], ['connector.id'], ),
    sa.ForeignKeyConstraint(['credential_id'], ['credential.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('index_attempt')
    op.drop_table('csrf_tokens')
    op.drop_table('connector_credential_pair')
    op.drop_table('slack_users')
    op.drop_table('model_configs')
    op.drop_table('credential')
    op.drop_table('api_keys')
    op.drop_table('users')
    op.drop_table('organizations')
    op.drop_table('google_app_credentials')
    op.drop_table('connector')
    # ### end Alembic commands ###
